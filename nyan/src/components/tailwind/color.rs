use super::dto::ToStr;
use std::borrow::Cow;

#[derive(Default, Debug, Clone, Copy, PartialEq)]
pub enum Color {
    #[default]
    Inherit,
    Transparent,
    Black,
    White,
    Slate(Shade),
    Red(Shade),
    Green(Shade),
    Blue(Shade),
    Yellow(Shade),
    Purple(Shade),
    Pink(Shade),
    Gray(Shade),
    Rose(Shade),
    Orange(Shade),
    Amber(Shade),
    Lime(Shade),
    Emerald(Shade),
    Teal(Shade),
    Cyan(Shade),
    Sky(Shade),
    Indigo(Shade),
    Violet(Shade),
    Fuchsia(Shade),
    //Custom(String)
}

#[derive(Default, Debug, Clone, Copy, PartialEq)]
pub enum Shade {
    OneHundred = 100,
    TwoHundred = 200,
    ThreeHundred = 300,
    FourHundred = 400,
    #[default]
    FiveHundred = 500,
    SixHundred = 600,
    SevenHundred = 700,
    EightHundred = 800,
    NineHundred = 900,
    NineHundredFifty = 950,
}

impl ToStr for Shade {
    fn to_str(&self) -> Cow<'static, str> {
        let s = match self {
            Shade::OneHundred => "100",
            Shade::TwoHundred => "200",
            Shade::ThreeHundred => "300",
            Shade::FourHundred => "400",
            Shade::FiveHundred => "500",
            Shade::SixHundred => "600",
            Shade::SevenHundred => "700",
            Shade::EightHundred => "800",
            Shade::NineHundred => "900",
            Shade::NineHundredFifty => "950",
        };
        Cow::Borrowed(s)
    }
}

impl ToStr for Color {
    fn to_str(&self) -> Cow<'static, str> {
        use Color::*;

        match self {
            Inherit => Cow::Borrowed("none"),
            Transparent => Cow::Borrowed("transparent"),
            Black => Cow::Borrowed("black"),
            White => Cow::Borrowed("white"),

            Slate(shade) => Cow::Owned(format!("slate-{}", shade.to_str())),
            Red(shade) => Cow::Owned(format!("red-{}", shade.to_str())),
            Green(shade) => Cow::Owned(format!("green-{}", shade.to_str())),
            Blue(shade) => Cow::Owned(format!("blue-{}", shade.to_str())),
            Yellow(shade) => Cow::Owned(format!("yellow-{}", shade.to_str())),
            Purple(shade) => Cow::Owned(format!("purple-{}", shade.to_str())),
            Pink(shade) => Cow::Owned(format!("pink-{}", shade.to_str())),
            Gray(shade) => Cow::Owned(format!("gray-{}", shade.to_str())),
            Rose(shade) => Cow::Owned(format!("rose-{}", shade.to_str())),
            Orange(shade) => Cow::Owned(format!("orange-{}", shade.to_str())),
            Amber(shade) => Cow::Owned(format!("amber-{}", shade.to_str())),
            Lime(shade) => Cow::Owned(format!("lime-{}", shade.to_str())),
            Emerald(shade) => Cow::Owned(format!("emerald-{}", shade.to_str())),
            Teal(shade) => Cow::Owned(format!("teal-{}", shade.to_str())),
            Cyan(shade) => Cow::Owned(format!("cyan-{}", shade.to_str())),
            Sky(shade) => Cow::Owned(format!("sky-{}", shade.to_str())),
            Indigo(shade) => Cow::Owned(format!("indigo-{}", shade.to_str())),
            Violet(shade) => Cow::Owned(format!("violet-{}", shade.to_str())),
            Fuchsia(shade) => Cow::Owned(format!("fuchsia-{}", shade.to_str())),
        }
    }
}

impl Color {
    pub fn to_hex(&self) -> &'static str {
        use Color::*;
        use Shade::*;

        match self {
            Transparent => "transparent",
            Black => "#000000",
            White => "#ffffff",

            Red(OneHundred) => "#fee2e2",
            Red(TwoHundred) => "#fecaca",
            Red(ThreeHundred) => "#fca5a5",
            Red(FourHundred) => "#f87171",
            Red(FiveHundred) => "#ef4444",
            Red(SixHundred) => "#dc2626",
            Red(SevenHundred) => "#b91c1c",
            Red(EightHundred) => "#991b1b",
            Red(NineHundred) => "#7f1d1d",
            Red(NineHundredFifty) => "#450a0a",

            Green(OneHundred) => "#d1fae5",
            Green(TwoHundred) => "#a7f3d0",
            Green(ThreeHundred) => "#6ee7b7",
            Green(FourHundred) => "#34d399",
            Green(FiveHundred) => "#22c55e",
            Green(SixHundred) => "#16a34a",
            Green(SevenHundred) => "#15803d",
            Green(EightHundred) => "#166534",
            Green(NineHundred) => "#14532d",
            Green(NineHundredFifty) => "#052e16",

            Blue(OneHundred) => "#dbeafe",
            Blue(TwoHundred) => "#bfdbfe",
            Blue(ThreeHundred) => "#93c5fd",
            Blue(FourHundred) => "#60a5fa",
            Blue(FiveHundred) => "#3b82f6",
            Blue(SixHundred) => "#2563eb",
            Blue(SevenHundred) => "#1d4ed8",
            Blue(EightHundred) => "#1e40af",
            Blue(NineHundred) => "#1e3a8a",
            Blue(NineHundredFifty) => "#172554",

            Gray(OneHundred) => "#f3f4f6",
            Gray(TwoHundred) => "#e5e7eb",
            Gray(ThreeHundred) => "#d1d5db",
            Gray(FourHundred) => "#9ca3af",
            Gray(FiveHundred) => "#6b7280",
            Gray(SixHundred) => "#4b5563",
            Gray(SevenHundred) => "#374151",
            Gray(EightHundred) => "#1f2937",
            Gray(NineHundred) => "#111827",
            Gray(NineHundredFifty) => "#030712",

            Yellow(OneHundred) => "#fef9c3",
            Yellow(TwoHundred) => "#fef08a",
            Yellow(ThreeHundred) => "#fde047",
            Yellow(FourHundred) => "#facc15",
            Yellow(FiveHundred) => "#eab308",
            Yellow(SixHundred) => "#ca8a04",
            Yellow(SevenHundred) => "#a16207",
            Yellow(EightHundred) => "#854d0e",
            Yellow(NineHundred) => "#713f12",
            Yellow(NineHundredFifty) => "#422006",

            Purple(OneHundred) => "#ede9fe",
            Purple(TwoHundred) => "#ddd6fe",
            Purple(ThreeHundred) => "#c4b5fd",
            Purple(FourHundred) => "#a78bfa",
            Purple(FiveHundred) => "#8b5cf6",
            Purple(SixHundred) => "#7c3aed",
            Purple(SevenHundred) => "#6d28d9",
            Purple(EightHundred) => "#5b21b6",
            Purple(NineHundred) => "#4c1d95",
            Purple(NineHundredFifty) => "#2e1065",

            Pink(OneHundred) => "#fce7f3",
            Pink(TwoHundred) => "#fbcfe8",
            Pink(ThreeHundred) => "#f9a8d4",
            Pink(FourHundred) => "#f472b6",
            Pink(FiveHundred) => "#ec4899",
            Pink(SixHundred) => "#db2777",
            Pink(SevenHundred) => "#be185d",
            Pink(EightHundred) => "#9d174d",
            Pink(NineHundred) => "#831843",
            Pink(NineHundredFifty) => "#500724",

            Rose(OneHundred) => "#ffe4e6",
            Rose(TwoHundred) => "#fecdd3",
            Rose(ThreeHundred) => "#fda4af",
            Rose(FourHundred) => "#fb7185",
            Rose(FiveHundred) => "#f43f5e",
            Rose(SixHundred) => "#e11d48",
            Rose(SevenHundred) => "#be123c",
            Rose(EightHundred) => "#9f1239",
            Rose(NineHundred) => "#881337",
            Rose(NineHundredFifty) => "#4c0519",

            Orange(OneHundred) => "#ffedd5",
            Orange(TwoHundred) => "#fed7aa",
            Orange(ThreeHundred) => "#fdba74",
            Orange(FourHundred) => "#fb923c",
            Orange(FiveHundred) => "#f97316",
            Orange(SixHundred) => "#ea580c",
            Orange(SevenHundred) => "#c2410c",
            Orange(EightHundred) => "#9a3412",
            Orange(NineHundred) => "#7c2d12",
            Orange(NineHundredFifty) => "#431407",

            Amber(OneHundred) => "#fef3c7",
            Amber(TwoHundred) => "#fde68a",
            Amber(ThreeHundred) => "#fcd34d",
            Amber(FourHundred) => "#fbbf24",
            Amber(FiveHundred) => "#f59e0b",
            Amber(SixHundred) => "#d97706",
            Amber(SevenHundred) => "#b45309",
            Amber(EightHundred) => "#92400e",
            Amber(NineHundred) => "#78350f",
            Amber(NineHundredFifty) => "#451a03",

            Lime(OneHundred) => "#ecfccb",
            Lime(TwoHundred) => "#d9f99d",
            Lime(ThreeHundred) => "#bef264",
            Lime(FourHundred) => "#a3e635",
            Lime(FiveHundred) => "#84cc16",
            Lime(SixHundred) => "#65a30d",
            Lime(SevenHundred) => "#4d7c0f",
            Lime(EightHundred) => "#3f6212",
            Lime(NineHundred) => "#365314",
            Lime(NineHundredFifty) => "#1a2e05",

            Slate(OneHundred) => "#f1f5f9",
            Slate(TwoHundred) => "#e2e8f0",
            Slate(ThreeHundred) => "#cbd5e1",
            Slate(FourHundred) => "#94a3b8",
            Slate(FiveHundred) => "#64748b",
            Slate(SixHundred) => "#475569",
            Slate(SevenHundred) => "#334155",
            Slate(EightHundred) => "#1e293b",
            Slate(NineHundred) => "#0f172a",
            Slate(NineHundredFifty) => "#020617",

            Emerald(OneHundred) => "#d1fae5",
            Emerald(TwoHundred) => "#a7f3d0",
            Emerald(ThreeHundred) => "#6ee7b7",
            Emerald(FourHundred) => "#34d399",
            Emerald(FiveHundred) => "#10b981",
            Emerald(SixHundred) => "#059669",
            Emerald(SevenHundred) => "#047857",
            Emerald(EightHundred) => "#065f46",
            Emerald(NineHundred) => "#064e3b",
            Emerald(NineHundredFifty) => "#022c22",

            Teal(OneHundred) => "#ccfbf1",
            Teal(TwoHundred) => "#99f6e4",
            Teal(ThreeHundred) => "#5eead4",
            Teal(FourHundred) => "#2dd4bf",
            Teal(FiveHundred) => "#14b8a6",
            Teal(SixHundred) => "#0d9488",
            Teal(SevenHundred) => "#0f766e",
            Teal(EightHundred) => "#115e59",
            Teal(NineHundred) => "#134e4a",
            Teal(NineHundredFifty) => "#042f2e",

            Cyan(OneHundred) => "#cffafe",
            Cyan(TwoHundred) => "#a5f3fc",
            Cyan(ThreeHundred) => "#67e8f9",
            Cyan(FourHundred) => "#22d3ee",
            Cyan(FiveHundred) => "#06b6d4",
            Cyan(SixHundred) => "#0891b2",
            Cyan(SevenHundred) => "#0e7490",
            Cyan(EightHundred) => "#155e75",
            Cyan(NineHundred) => "#164e63",
            Cyan(NineHundredFifty) => "#083344",

            Sky(OneHundred) => "#e0f2fe",
            Sky(TwoHundred) => "#bae6fd",
            Sky(ThreeHundred) => "#7dd3fc",
            Sky(FourHundred) => "#38bdf8",
            Sky(FiveHundred) => "#0ea5e9",
            Sky(SixHundred) => "#0284c7",
            Sky(SevenHundred) => "#0369a1",
            Sky(EightHundred) => "#075985",
            Sky(NineHundred) => "#0c4a6e",
            Sky(NineHundredFifty) => "#082f49",

            Indigo(OneHundred) => "#e0e7ff",
            Indigo(TwoHundred) => "#c7d2fe",
            Indigo(ThreeHundred) => "#a5b4fc",
            Indigo(FourHundred) => "#818cf8",
            Indigo(FiveHundred) => "#6366f1",
            Indigo(SixHundred) => "#4f46e5",
            Indigo(SevenHundred) => "#4338ca",
            Indigo(EightHundred) => "#3730a3",
            Indigo(NineHundred) => "#312e81",
            Indigo(NineHundredFifty) => "#1e1b4b",

            Violet(OneHundred) => "#ede9fe",
            Violet(TwoHundred) => "#ddd6fe",
            Violet(ThreeHundred) => "#c4b5fd",
            Violet(FourHundred) => "#a78bfa",
            Violet(FiveHundred) => "#8b5cf6",
            Violet(SixHundred) => "#7c3aed",
            Violet(SevenHundred) => "#6d28d9",
            Violet(EightHundred) => "#5b21b6",
            Violet(NineHundred) => "#4c1d95",
            Violet(NineHundredFifty) => "#2e1065",

            Fuchsia(OneHundred) => "#fdf4ff",
            Fuchsia(TwoHundred) => "#fae8ff",
            Fuchsia(ThreeHundred) => "#f5d0fe",
            Fuchsia(FourHundred) => "#f0abfc",
            Fuchsia(FiveHundred) => "#d946ef",
            Fuchsia(SixHundred) => "#c026d3",
            Fuchsia(SevenHundred) => "#a21caf",
            Fuchsia(EightHundred) => "#86198f",
            Fuchsia(NineHundred) => "#701a75",
            Fuchsia(NineHundredFifty) => "#4a044e",
            _ => "#3b82f6",
        }
    }
}
